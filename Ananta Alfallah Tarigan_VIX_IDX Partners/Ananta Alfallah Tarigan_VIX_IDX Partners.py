# -*- coding: utf-8 -*-
"""Projec_fix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LRloxv3ry5vrriVN11uTz_be91aTiEKm

## TASK
- Kamu diminta untuk membangun model yang dapat memprediksi credit risk menggunakan dataset yang disediakan oleh company yang terdiri dari data pinjaman yang diterima dan yang ditolak.

- Selain itu kamu juga perlu mempersiapkan media visual untuk mempresentasikan solusi ke klien. Pastikan media visual yang kamu buat jelas, mudah dibaca, dan komunikatif.

## Membuat model untuk menentukan layak tidaknya seorang costumer mendapat pinjaman

## Menyiapkan semua library yang dibutuhkan
"""

import pandas as pd
from joblib import dump, load
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
from joblib import dump, load

"""## Data Wrangling

### Gathering Data

Mengumpulkan data yang dibutuhkan, serta melihat isi data teratas
"""

df = pd.read_csv('loan_data_2007_2014.csv')
df.shape

df

"""### Assessing and Cleaning Data

- Menilai kualitas dari data yang akan digunakan. Penilaian ini bertujuan untuk melihat berbagai permasalahan yang ada dalam data tersebut. Seperti tipe kolom, adanya kosong/NA/Null, adanya duplikat, dll
- Membersihkan data tersebut sehingga siap untuk dijadikan input dan output pembuatan model
"""

df.info()

print("Jumlah duplikasi: ", df.duplicated().sum())

df.isnull().sum()

"""Dapat diketahui terdapat kolom yang mempunyai full data kosong di dalamnya, sehingga kolom ini tidak dibutuhkan (tidak memberi informasi)"""

df.dropna(axis=1, how='all', inplace=True)

df.nunique()

"""Dapat diketahui bahwa panjang row sebesar 466285, yang juga menunjukan tiap-tiap baris mewakili sebuah individu, yang mana kolom seperti ini tidak digunakan sebagai fitur, selain itu kolom2 di bawah ini juga akan di drop

- desc=berupa penjelasan alasan meminjam
- sub grade = tidak diketahui
- emp_title = berupa nama peminjam (205475 unik value)
- pymnt_plan = sangat didominasi oleh 1 value (2 unik value)
- title =  terlalu banyak value unik (63098 unik value)
- zip_code = nilai-nilai konstan
- addr_state =  hanya berupa alamat
- title = hanya berupa judul
- policy_code = Hanya terdiri 1 nilai/kategori
- application_type =  Hanya terdiri 1 nilai/kategori
- acc_now_delinq = Sangat didominasi oleh 1 nilai
- next_pymnt_d = Dirasa tidak terlalu berguna sebagai fitur
"""

drop2 = ['Unnamed: 0', 'id', 'member_id', 'url', 'desc', 'sub_grade', 'emp_title',
         'pymnt_plan', 'zip_code', 'addr_state', 'title', 'policy_code', 'application_type', 'acc_now_delinq', 'next_pymnt_d']
df.drop(columns=drop2, inplace=True)

df.term.unique()

df_time = ['issue_d','earliest_cr_line','last_pymnt_d','last_credit_pull_d']
for i in df_time:
    df[i] = pd.to_datetime(df[i], format='%b-%y')

df.select_dtypes('datetime64').describe()

df['end_date'] = pd.to_datetime('2017-12-01')

df['mths_since_earliest_cr_line'] = df['end_date'].dt.to_period('M').astype('int64') - \
    df['earliest_cr_line'].dt.to_period('M').astype('int64')
df.drop(columns='earliest_cr_line', inplace=True)

df['mths_since_issue_d'] = df['end_date'].dt.to_period('M').astype('int64') - \
    df['issue_d'].dt.to_period('M').astype('int64')
df.drop(columns='issue_d', inplace=True)

df['mths_since_last_pymnt_d'] = df['end_date'].dt.to_period('M').astype('int64') - \
    df['last_pymnt_d'].dt.to_period('M').astype('int64')
df.drop(columns='last_pymnt_d', inplace=True)

df['mths_since_last_credit_pull_d'] = df['end_date'].dt.to_period('M').astype('int64') - \
    df['last_credit_pull_d'].dt.to_period('M').astype('int64')
df.drop(columns='last_credit_pull_d', inplace=True)

df.drop(columns='end_date', inplace=True)

df[['mths_since_earliest_cr_line','mths_since_issue_d' ,'mths_since_last_pymnt_d','mths_since_last_credit_pull_d']].describe(include="all")

"""Perbaikan nilai mines, pada jumlah bulan"""

df.loc[df['mths_since_earliest_cr_line']<0, 'mths_since_earliest_cr_line'] = df['mths_since_earliest_cr_line'].max()
df.loc[df['mths_since_last_pymnt_d']<0, 'mths_since_last_pymnt_d'] = df['mths_since_last_pymnt_d'].max()
df.loc[df['mths_since_last_credit_pull_d']<0, 'mths_since_last_credit_pull_d'] = df['mths_since_last_credit_pull_d'].max()

df[['mths_since_earliest_cr_line','mths_since_issue_d' ,'mths_since_last_pymnt_d','mths_since_last_credit_pull_d']].describe(include="all")

df.emp_length.value_counts()

def emp_to_num(x):
    if x == '10+ years':
        return 10
    elif x == '2 years':
        return 2
    elif x == '3 years':
        return 3
    elif x == '< 1 year':
        return 0
    elif x == '5 years':
        return 5
    elif x == '1 year':
        return 1
    elif x == '4 years':
        return 4
    elif x == '7 years':
        return 7
    elif x == '6 years':
        return 6
    elif x == '8 years':
        return 8
    elif x == '9 years':
        return 9

df.emp_length = df.emp_length.apply(emp_to_num)

df.grade.unique()

def grade_to_num(x):
    if x == 'A':
        return 6
    elif x == 'B':
        return 5
    elif x == 'C':
        return 4
    elif x == 'D':
        return 3
    elif x == 'E':
        return 2
    elif x == 'F':
        return 1
    elif x == 'G':
        return 0
df.grade = df.grade.apply(grade_to_num)
df.grade

df.home_ownership.unique()

target_dict = {'MORTGAGE':'MORTGAGE',
               'RENT':'RENT',
               'OWN':'OWN',
               'OTHER':'OTHER',
               'ANY':'OTHER',
               'NONE':'OTHER'}

df["home_ownership"] = df["home_ownership"].map(target_dict)

df.verification_status.unique()

"""TARGET / LABEL model"""

#TARGET
df.loan_status.unique()

"""- Good Loan (1) : Fully Paid, Does not meet the credit policy. Status:Fully Paid
- Bad Loan (0) : Charged Off, Does not meet the credit policy. Status:Charged Off, Default, Late (31-120 days)
- Jenis Loan yang belum dapat di nilai mutunya / belum pasti (dull) : Current, In Grace Period, Late (16-30 days) <-- jenis loan ini akan di drop nantinya

"""

def status_to_target(x):
    if x in ['Fully Paid','Does not meet the credit policy. Status:Fully Paid',]:
        return 1
    elif x in ['Charged Off','Does not meet the credit policy. Status:Charged Off','Default,Late (31-120 days)']:
        return 0
    else:
        return 'dull'
df.loan_status = df.loan_status.apply(status_to_target)

df = df.loc[~df['loan_status'].isin(['dull'])].reset_index(drop=True)

"""### Perbaikan Missing Value Secara Keseluruhan"""

df.isnull().sum()

df.shape

"""- emp_length: sebenarnya merupakan kolom untuk pengkategorian yang telah diubah menjadi numerik, sehingga di isikan nilai mode
- annual_inc: hanya berupa 4 missing value, dan berupa numerik, banyak nilai yang mendominasi,  sehingga diisikan nilai mean
- delinq_2yrs: berupa 29 missing value, dan merupakan kolom untuk pengkategorian, sehingga diisikan nilai mode
- inq_last_6mths: Diisikan dengan nilai mode
- mths_since_last_delinq: berupa 129258 missing value, didominasi sangat banyak oleh 0, sehingga dijadikan 0
- mths_since_last_record: 202458 missing value, terlalu banyak missing value, sehingga kolom ini dihilangkan
- open_acc: berupa 29 missing value, data numerik, banyak nilai yang sama-sama mendominasi, sehingga diisikan nilai mean
- pub_rec: Public record,merupakan data numerik yang didominasi nilai 0. sehingga dijadikan 0
- revol_util: 226 missing value, nilai numerik, denga nilai 0 cukup mendominasi, sehingga dijadikan 0
- total_acc: 29 missing value, berupa data numerik, banyak nilai tengah yang mendominasi, sehingga diisikan mode
- collections_12_mths_ex_med: 145 nilai kosong dianggap tidak ada atau bernilai 0
- mths_since_last_major_derog: 189945 missing value, terlalu banyak missing value, sehingga klom ini dihilangkan
- tot_coll_amt: merupakan data numerik yang didominasi nilai 0. sehingga diisikan nilai 0
- tot_cur_bal: Merupakan data numerik dengan tidak ada nilai yang terlalu mendominasi, sehingga diisikan nilai mean
- total_rev_hi_lim: Diisikan dengan nilai yang mendominasi
"""

df['emp_length'].fillna(df['emp_length'].mode()[0], inplace=True)
df['annual_inc'].fillna(df['annual_inc'].mean(), inplace=True)
df['delinq_2yrs'].fillna(df['delinq_2yrs'].mode()[0], inplace=True)
df['inq_last_6mths'].fillna(df['inq_last_6mths'].mode()[0], inplace=True)
df['mths_since_last_delinq'].fillna(0, inplace=True)
df.drop(columns='mths_since_last_record', inplace=True)
df['open_acc'].fillna(df['open_acc'].mean(), inplace=True)
df['pub_rec'].fillna(0, inplace=True)
df['revol_util'].fillna(0, inplace=True)
df['total_acc'].fillna(df['total_acc'].mode()[0], inplace=True)
df['collections_12_mths_ex_med'].fillna(0, inplace=True)
df.drop(columns='mths_since_last_major_derog', inplace=True)
df['tot_coll_amt'].fillna(df['tot_coll_amt'].mode()[0], inplace=True)
df['tot_cur_bal'].fillna(df['tot_cur_bal'].mean(), inplace=True)
df['total_rev_hi_lim'].fillna(df['total_rev_hi_lim'].mode()[0], inplace=True)

df.term.value_counts()

df.head(2)

"""### EDA And Data Preparation"""

df.corr(numeric_only=True)

sns.distplot(df.loc[:, 'loan_amnt'], hist=True, kde=True, rug=False,
             norm_hist=True, axlabel='Loan Amount')
plt.title('Loan Amount Distribution')
plt.show()

loan_status1 = df.groupby(by='loan_status').agg({'loan_amnt':'count'}).reset_index()

sns.barplot(x="loan_status", y="loan_amnt", data=loan_status1, palette=['#D04848','#6895D2'])
plt.title("Loan Status", loc="center", fontsize=15)
plt.ylabel(None)
plt.xlabel(None)
plt.show()

#loan status 1 (good loan) mendominasi, sehingga harus dilakukan penyesuaian jumlah sampel untuk kedua kelas ini

"""### Memisahkan Fitur dan Target"""

X = df.drop('loan_status', axis=1)
y = df.loan_status

"""### Melakukan one-hot encoding"""

object_cols = X.select_dtypes(include=['object']).columns

X_encoded = pd.get_dummies(X, columns=object_cols, dtype=int)

X_encoded

"""### Melakukan Standardisasi"""

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_encoded)

X_scaled

"""### Undersampling Good Loan (1) agar berjumlah sama dengan Bad Loan (0)"""

y = y.astype(int)
y.value_counts()

from imblearn.under_sampling import RandomUnderSampler

X = X_scaled
y = y

class_counts = y.value_counts()

min_class_count = min(class_counts)

rus = RandomUnderSampler(sampling_strategy={0: min_class_count, 1: min_class_count}, random_state=42)

X_resampled, y_resampled = rus.fit_resample(X, y)

X_resampled

y_resampled.value_counts()

"""### Melakukan Permodelan untuk klasifikasi biner dengan Logistic Regression"""

X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

model = LogisticRegression(max_iter=1000)
model.fit(X_resampled, y_resampled)

y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

print(f'Accuracy: {accuracy}')
print(f'Classification Report:\n{report}')

"""### Menyimpan Model"""

# Menyimpan model
dump(model, 'logistic_regression_model.joblib')

# Memuat model
loaded_model = load('logistic_regression_model.joblib')

# Menggunakan model yang sudah dimuat
loaded_model.predict(X_test)